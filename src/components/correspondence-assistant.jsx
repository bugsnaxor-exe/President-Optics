


import * as React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Copy, Loader2, Sparkles, Download, Printer, MessageSquare } from 'lucide-react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';

const GenerateCorrespondenceInputSchema = z.object({
  patientName: z.string().describe('The name of the patient.'),
  accountStatus: z
    .string()
    .describe(
      'The status of the patient account (e.g., overdue balance, upcoming appointment, new prescription ready).'
    ),
  correspondenceType: z
    .enum(['Informal Email', 'Formal Letter', 'Appointment Reminder'])
    .describe('The type of correspondence to generate.'),
  tone: z
    .enum(['Professional', 'Friendly', 'Empathetic', 'Urgent'])
    .describe('The desired tone of the message.'),
});



export function CorrespondenceAssistant() {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = React.useState(false);
  const [isPrinting, setIsPrinting] = React.useState(false);
  const [generatedText, setGeneratedText] = React.useState('');
  const [formDataForPrint, setFormDataForPrint] = React.useState(null);

  const form = useForm({
    resolver: zodResolver(GenerateCorrespondenceInputSchema),
    defaultValues: {
      patientName: '',
      accountStatus: '',
      correspondenceType: 'Informal Email',
      tone: 'Friendly',
    },
  });

  const onSubmit = async (data) => {
    setIsLoading(true);
    setGeneratedText('');
    setFormDataForPrint(null);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    setIsLoading(false);
    
    // Mocked response
    const mockCorrespondence = `Dear ${data.patientName},

This is a friendly reminder regarding: ${data.accountStatus}.

This is a mock message generated with a ${data.tone.toLowerCase()} tone for a ${data.correspondenceType.toLowerCase()}. In a real application, this would be a full message generated by an AI.

Thank you,
OctaCore Team`;

    setGeneratedText(mockCorrespondence);
    setFormDataForPrint(data);
    toast({
      title: 'Correspondence Generated',
      description: 'The AI assistant has successfully created the message.',
    });
  };
  
  const handleCopy = () => {
    navigator.clipboard.writeText(generatedText);
    toast({
        title: "Copied to clipboard!",
    });
  }

  const handleSendNotification = () => {
    // This is a simulation. In a real app, this would trigger a backend service.
    toast({
        title: "Notification Sent (Simulated)",
        description: `A message has been sent to ${formDataForPrint?.patientName}.`
    });
  }

  const handlePrint = async (action) => {
    const printableElement = document.getElementById('correspondence-printable');
    if (!printableElement) return;

    setIsPrinting(true);
    toast({ title: 'Generating PDF...', description: 'Please wait a moment.' });
    
    printableElement.classList.add('print-styles');
    
    try {
        const canvas = await html2canvas(printableElement, { 
            scale: 2,
            backgroundColor: '#ffffff',
            windowHeight: printableElement.scrollHeight,
            scrollY: -window.scrollY
        });
        const imgData = canvas.toDataURL('image/png');

        const pdf = new jsPDF('p', 'mm', 'a4');
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
        pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);

        if (action === 'download') {
            pdf.save(`correspondence-${formDataForPrint?.patientName.replace(' ','_') || 'document'}.pdf`);
            toast({ title: 'PDF Downloaded', description: 'The correspondence has been saved.' });
        } else {
            pdf.autoPrint();
            window.open(pdf.output('bloburl'), '_blank');
            toast({ title: 'Ready to Print', description: 'The correspondence has been sent to the printer.' });
        }
    } catch (error) {
        console.error("Error generating PDF:", error);
        toast({ variant: 'destructive', title: 'PDF Generation Failed' });
    } finally {
        printableElement.classList.remove('print-styles');
        setIsPrinting(false);
    }
  };


  return (
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardHeader className="pb-3 px-0">
            <CardTitle>Generate Patient Communication</CardTitle>
            <CardDescription className="max-w-lg text-balance leading-relaxed">
              Use the AI assistant to quickly draft messages for various patient interactions.
            </CardDescription>
          </CardHeader>
          <CardContent className="grid gap-4 px-0">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                control={form.control}
                name="patientName"
                render={({ field }) => (
                    <FormItem>
                    <FormLabel>Patient Name</FormLabel>
                    <FormControl>
                        <Input placeholder="e.g., Jane Doe" {...field} />
                    </FormControl>
                    <FormMessage />
                    </FormItem>
                )}
                />
                 <FormField
                control={form.control}
                name="accountStatus"
                render={({ field }) => (
                    <FormItem>
                    <FormLabel>Reason for Communication</FormLabel>
                    <FormControl>
                        <Input placeholder="e.g., Overdue balance of â‚¹50" {...field} />
                    </FormControl>
                    <FormMessage />
                    </FormItem>
                )}
                />
            </div>
             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                control={form.control}
                name="correspondenceType"
                render={({ field }) => (
                    <FormItem>
                    <FormLabel>Type</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                        <SelectTrigger><SelectValue placeholder="Select a type" /></SelectTrigger>
                        </FormControl>
                        <SelectContent>
                        <SelectItem value="Informal Email">Informal Email</SelectItem>
                        <SelectItem value="Formal Letter">Formal Letter</SelectItem>
                        <SelectItem value="Appointment Reminder">Appointment Reminder</SelectItem>
                        </SelectContent>
                    </Select>
                    <FormMessage />
                    </FormItem>
                )}
                />
                 <FormField
                control={form.control}
                name="tone"
                render={({ field }) => (
                    <FormItem>
                    <FormLabel>Tone</FormLabel>
                     <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                        <SelectTrigger><SelectValue placeholder="Select a tone" /></SelectTrigger>
                        </FormControl>
                        <SelectContent>
                        <SelectItem value="Professional">Professional</SelectItem>
                        <SelectItem value="Friendly">Friendly</SelectItem>
                        <SelectItem value="Empathetic">Empathetic</SelectItem>
                        <SelectItem value="Urgent">Urgent</SelectItem>
                        </SelectContent>
                    </Select>
                    <FormMessage />
                    </FormItem>
                )}
                />
            </div>
            
            <div className="relative mt-4">
                 <Button type="submit" disabled={isLoading}>
                    {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
                    Generate
                </Button>
            </div>

            {generatedText && (
                <div className="mt-4 space-y-4">
                    <div id="correspondence-printable" className="p-1">
                        <div className="relative p-4 border rounded-md min-h-[160px] whitespace-pre-wrap">
                            <Button type="button" variant="ghost" size="icon" className="absolute top-2 right-2" onClick={handleCopy}>
                                <Copy className="h-4 w-4" />
                            </Button>
                           <p className="text-sm">{generatedText}</p>
                        </div>
                    </div>
                    <div className="flex justify-start gap-2 print-hidden">
                        <Button variant="secondary" onClick={handleSendNotification}>
                            <MessageSquare className="mr-2 h-4 w-4" /> Send Notification
                        </Button>
                        <Button variant="outline" onClick={() => handlePrint('download')} disabled={isPrinting}>
                            {isPrinting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Download className="mr-2 h-4 w-4" />}
                            Download PDF
                        </Button>
                        <Button onClick={() => handlePrint('print')} disabled={isPrinting}>
                            {isPrinting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Printer className="mr-2 h-4 w-4" />}
                            Print
                        </Button>
                    </div>
                </div>
            )}
          </CardContent>
        </form>
      </Form>
  );
}
